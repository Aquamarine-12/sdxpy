- key: abstract_method
  en:
    term: abstract method
    def: >
      In [object-oriented programming](#oop), a [method](#method) that is
      defined but not implemented. Programmers will define an abstract method in
      a [parent class](#parent_class) to specify operations that [child
      classes](#child_class) must provide.

- key: base_class
  ref:
  - child_class
  - derived_class
  - parent_class
  en:
    term: base class
    def: >
      In [object-oriented programming](#oop), a [class](#class) from which other
      classes are derived.

- key: cache
  en:
    term: cache
    def: >
      Something that stores copies of data so that future requests for it can be
      satisfied more quickly. The CPU in a computer uses a hardware cache to
      hold recently-accessed values; many programs rely on a software cache to
      reduce network traffic and latency. Figuring out when something in a cache
      is out-of-date and should be replaced is one of the [two hard problems in
      computer science](#two_hard_problems).

- key: chain_of_responsibility_pattern
  en:
    term: Chain of Responsibility pattern
    def: >
      A [design pattern](#design_pattern) in which each [object](#object) either
      handles a request or passes it on to another object.

- key: child_class
  en:
    term: child class
    def: >
      In [object-oriented programming](#oop), a [class](#class) derived from
      another class (called the [parent class](#parent_class)).
  break: true

- key: class
  en:
    term: class
    def: >
      In [object-oriented programming](#oop), a structure that combines data and
      operations (called [methods](#method)). The program then uses a
      [constructor](#constructor) to create an [object](#object) with those
      properties and methods. Programmers generally put generic or reusable
      behavior in [parent classes](#parent_class), and more detailed or specific
      behavior in [child classes](#child_class).

- key: constructor
  en:
    term: constructor
    def: >
      A function that creates an [object](#object) of a particular
      [class](#class).

- key: derived_class
  ref:
  - child_class
  en:
    term: derived class
    def: >
      In [object-oriented programming](#oop), a class that is a direct or
      indirect extension of a [base class](#base_class).

- key: design_pattern
  ref:
  - iterator_pattern
  - singleton_pattern
  - template_method_pattern
  - visitor_pattern
  en:
    term: design pattern
    def: >
      A recurring pattern in software design that is specific enough to be worth
      naming, but not so specific that a single best implementation can be
      provided by a [library](#library).

- key: eager_matching
  en:
    term: eager matching
    def: >
      Matching as much as possible, as early as possible.

- key: generator_function
  ref:
  - iterator_pattern
  en:
    term: generator function
    def: >
      A function whose state is automatically saved when it returns a value so
      that execution can be restarted from that point the next time it is
      called. One example of generator functions use is to produce streams of
      values that can be processed by `for` loops.

- key: generic_function
  en:
    term: generic function
    def: >
      A collection of functions with similar purpose, each operating on a
      different class of data.

- key: greedy_algorithm
  en:
    term: greedy algorithm
    def: >
      An algorithm that consumes as much input as possible, as early as
      possible.

- key: instance
  en:
    term: instance
    def: >
      An [object](#object) of a particular [class](#class).

- key: iterator_pattern
  ref:
  - visitor_pattern
  en:
    term: Iterator pattern
    def: >
      A [design pattern](#design_pattern) in which a temporary [object](#object)
      or [generator function](#generator_function) produces each value from a
      collection in turn for processing. This pattern hides the differences
      between different kinds of data structures so that everything can be
      processed using loops.

- key: lazy_matching
  ref:
  - eager_matching
  en:
    term: lazy matching
    def: >
      Matching as little as possible while still finding a valid match.

- key: library
  en:
    term: library
    def: >
      An installable collection of software, also often called a
      [module](#module) or [package](#package).

- key: method
  en:
    term: method
    def: >
      An implementation of a [generic function](#generic_function) that handles
      objects of a specific class.

- key: module
  en:
    term: module
    def: >
      A reusable software [package](#package), also often called a
      [library](#library).

- key: object
  en:
    term: object
    def: >
      In [object-oriented programming](#oop), a structure that contains the data
      for a specific instance of a [class](#class). The operations the object is
      capable of are defined by the class's [methods](#method).

- key: off_by_one_error
  en:
    term: off-by-one error
    def: >
      A common error in programming in which the program refers to element `i`
      of a structure when it should refer to element `i-1` or `i+1`, or
      processes `N` elements when it should process `N-1` or `N+1`.

- key: oop
  en:
    term: object-oriented programming
    def: >
      A style of programming in which functions and data are bound together in
      [objects](#object) that only interact with each other through well-defined
      interfaces.
    acronym: OOP

- key: open_closed_principle
  en:
    term: Open-Closed Principle
    def: >
      A design rule stating that software should be open for extension but
      closed for modification, i.e., it should be possible to extend
      functionality without having to rewrite existing code.
  break: true

- key: package
  en:
    term: package
    def: >
      A collection of code, data, and documentation that can be distributed and
      re-used. Also referred to in some languages as a [library](#library) or
      [module](#module).

- key: parent_class
  en:
    term: parent class
    def: >
      In [object-oriented programming](#oop), the [class](#class) from which a
      sub class (called the [child class](#child_class)) is derived.

- key: polymorphism
  en:
    term: polymorphism
    def: >
      Having many different implementations of the same interface. If a set of
      functions or objects are polymorphic, they can be called interchangeably.

- key: singleton
  ref:
  - singleton_pattern
  en:
    term: singleton
    def: >
      A set with only one element, or a [class](#class) with only one
      [instance](#instance).

- key: singleton_pattern
  en:
    term: Singleton pattern
    def: >
      A [design pattern](#design_pattern) that creates a [singleton](#singleton)
      [object](#object) to manage some resource or service, such as a database
      or [cache](#cache). In [object-oriented programming](#oop), the pattern is
      usually implemented by hiding the [constructor](#constructor) of the
      [class](#class) in some way so that it can only be called once.

- key: template_method_pattern
  en:
    term: Template Method pattern
    def: >
      A [design pattern](#design_pattern) in which a [parent
      class](#parent_class) defines an overall sequence of operations by calling
      [abstract methods](#abstract_method) that [child classes](#child_class)
      must then implement. Each child class then behaves in the same general
      way, but implements the steps differently.

- key: two_hard_problems
  en:
    term: two hard problems in computer science
    def: >
      Refers to a quote by Phil Karlton: "There are only two hard problems in
      computer scienceâ€”cache invalidation and naming things." Many variations
      add a third problem as a joke, such as [off-by-one errors](#off_by_one_error).

- key: visitor_pattern
  ref:
  - iterator_pattern
  en:
    term: Visitor pattern
    def: >
      A [design pattern](#design_pattern) in which the operation to be done is
      taken to each element of a data structure in turn. It is usually
      implemented by having a generator "visitor" that knows how to reach the
      structure's elements, which is given a function or method to call for each
      in turn, and that carries out the specific operation.
